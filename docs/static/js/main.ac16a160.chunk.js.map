{"version":3,"sources":["game.js","components/board.js","App.js","serviceWorker.js","index.js"],"names":["Game","cells","status","previous","isNextMove","_this","this","Object","classCallCheck","Error","moveCount","chainCount","allCells","values","map","row","reduce","total","current","concat","rowsAndColumns","constructor","ROWS","y","COLUMNS","x","nextPlayer","moveType","availableMoves","canUndo","winner","getWinner","finished","hasAvailableMove","OTHER_PLAYER","noMovesAreAvailable","getInitialCells","getInitialStatus","_ref","Math","floor","JSON","stringify","undefined","arguments","length","available","filter","coordinates","getAvailableCoordinates","winningCell","find","cell","player","level","_this2","_this3","getMovableAvailableMoves","_this4","maximumLevel","abs","_this5","expectedMoveType","targetCoordinates","checkCoordinatesAreValid","_makeMoveMethods","makeMoveMethod","defineProperty","MOVE_TYPE_PLACE_FIRST_WORKER","placeFirstWorker","MOVE_TYPE_PLACE_SECOND_WORKER","placeSecondWorker","MOVE_TYPE_SELECT_WORKER_TO_MOVE","selectWorkerToMove","MOVE_TYPE_MOVE_FIRST_WORKER","moveFirstWorker","MOVE_TYPE_MOVE_SECOND_WORKER","moveSecondWorker","MOVE_TYPE_BUILD_AROUND_WORKER","buildAroundWorker","bind","_ref2","checkCanMakeMove","objectSpread","worker","WORKER_FIRST","createStep","getEmptyCellsAvailableMoves","_ref3","WORKER_SECOND","PLAYER_A","getPlayerAvailableMoves","_ref4","to","_this6","fromCell","toCell","getBuildableAvailableMoves","_ref5","moveWorker","_ref6","_ref7","createNext","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","value","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","err","return","allMovesAreAvailable","_this7","_this8","PLAYER_B","PLAYERS","Array","from","index","Board","makeMove","props","game","react_default","a","createElement","className","key","classNames","onClick","Component","App","state","create","newGame","setState","undo","react","PLAYER_NAMES","MOVE_TYPE_NAMES","board","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ac16a160.chunk.js","sourcesContent":["class Game {\r\n  static PLAYER_A = 'player-a';\r\n  static PLAYER_B = 'player-b';\r\n  static PLAYERS = [\r\n    this.PLAYER_A,\r\n    this.PLAYER_B,\r\n  ];\r\n  static OTHER_PLAYER = {\r\n    [this.PLAYER_A]: this.PLAYER_B,\r\n    [this.PLAYER_B]: this.PLAYER_A,\r\n  };\r\n\r\n  static WORKER_FIRST = 'first-worker';\r\n  static WORKER_SECOND = 'second-worker';\r\n\r\n  static MOVE_TYPE_PLACE_FIRST_WORKER = 'place-first-worker';\r\n  static MOVE_TYPE_PLACE_SECOND_WORKER = 'place-second-worker';\r\n  static MOVE_TYPE_SELECT_WORKER_TO_MOVE = 'select-worker-to-move';\r\n  static MOVE_TYPE_MOVE_FIRST_WORKER = 'move-first-worker';\r\n  static MOVE_TYPE_MOVE_SECOND_WORKER = 'move-second-worker';\r\n  static MOVE_TYPE_BUILD_AROUND_WORKER = 'build-around-worker';\r\n\r\n  static ROWS = Array.from({length: 5}, (value, index) => index);\r\n  static COLUMNS = Array.from({length: 5}, (value, index) => index);\r\n\r\n  static create() {\r\n    const cells = this.getInitialCells();\r\n    const status = this.getInitialStatus();\r\n    return new this(cells, status, null, false);\r\n  }\r\n\r\n  createStep(cells, status) {\r\n    return new this.constructor(cells, status, this, false);\r\n  }\r\n\r\n  createNext(cells, status) {\r\n    return new this.constructor(cells, status, this, true);\r\n  }\r\n\r\n  constructor(cells, status, previous, isNextMove) {\r\n    if (!cells || !status) {\r\n      throw new Error(\"You need to pass cells, status, and previous game\");\r\n    }\r\n    this.previous = previous;\r\n    this.moveCount = this.previous ? (isNextMove ? this.previous.moveCount + 1 : this.previous.moveCount) : 1;\r\n    this.chainCount = this.previous ? this.previous.chainCount + 1 : 0;\r\n\r\n    this.cells = cells;\r\n    this.allCells = Object.values(this.cells)\r\n      .map(row => Object.values(row))\r\n      .reduce((total, current) => total.concat(current));\r\n    this.rowsAndColumns = this.constructor.ROWS.map(y => ({\r\n      y,\r\n      cells: this.constructor.COLUMNS.map(x => this.cells[y][x]),\r\n    }));\r\n\r\n    const {nextPlayer, moveType, availableMoves, canUndo} = status;\r\n    this.nextPlayer = nextPlayer;\r\n    this.moveType = moveType;\r\n    this.availableMoves = availableMoves;\r\n    this.canUndo = canUndo;\r\n\r\n    this.winner = this.getWinner();\r\n    if (this.winner) {\r\n      this.finished = true;\r\n    } else if (!this.hasAvailableMove(this.availableMoves)) {\r\n      this.finished = true;\r\n      this.winner = this.constructor.OTHER_PLAYER[this.nextPlayer];\r\n    } else {\r\n      this.finished = false;\r\n    }\r\n\r\n    if (this.finished) {\r\n      this.availableMoves = this.constructor.noMovesAreAvailable();\r\n    }\r\n  }\r\n\r\n  static getInitialCells() {\r\n    const cells = {};\r\n    for (const y of this.ROWS) {\r\n      cells[y] = {};\r\n      for (const x of this.COLUMNS) {\r\n        cells[y][x] = {\r\n          x, y,\r\n          player: null,\r\n          worker: null,\r\n          level: 0,\r\n        };\r\n      }\r\n    }\r\n\r\n    return cells;\r\n  }\r\n\r\n  static getInitialStatus() {\r\n    return  {\r\n      nextPlayer: this.PLAYER_A,\r\n      moveType: this.MOVE_TYPE_PLACE_FIRST_WORKER,\r\n      finished: false,\r\n      winner: null,\r\n      availableMoves: this.allMovesAreAvailable(),\r\n      canUndo: false,\r\n    };\r\n  }\r\n\r\n  checkCoordinatesAreValid({x, y}) {\r\n    if (Math.floor(x) !== x || Math.floor(y) !== y) {\r\n      throw new Error(`Coordinates '${JSON.stringify({x, y})}' are not valid`);\r\n    }\r\n    if (this.availableMoves[y] === undefined || this.availableMoves[y][x] === undefined) {\r\n      throw new Error(`Coordinates '${JSON.stringify({x, y})}' are out of bounds`);\r\n    }\r\n  }\r\n\r\n  getAvailableCoordinates(availableMoves = this.availableMoves) {\r\n    return availableMoves\r\n      .map((row, y) => row\r\n        .map((available, x) => available ? {x, y} : null)\r\n        .filter(coordinates => coordinates))\r\n      .reduce((total, current) => total.concat(current));\r\n  }\r\n\r\n  hasAvailableMove(availableMoves = this.availableMoves) {\r\n    return this.getAvailableCoordinates(availableMoves).length > 0;\r\n  }\r\n\r\n  getWinner() {\r\n    const winningCell = this.allCells.find(cell => cell.player && cell.level === 3);\r\n    if (!winningCell) {\r\n      return null;\r\n    }\r\n\r\n    return winningCell.player;\r\n  }\r\n\r\n  static allMovesAreAvailable() {\r\n    return this.ROWS.map(() => this.COLUMNS.map(() => true));\r\n  }\r\n\r\n  static noMovesAreAvailable() {\r\n    return this.ROWS.map(() => this.COLUMNS.map(() => false));\r\n  }\r\n\r\n  getEmptyCellsAvailableMoves(cells) {\r\n    return this.constructor.ROWS.map(y => this.constructor.COLUMNS.map(x => !cells[y][x].player));\r\n  }\r\n\r\n  getPlayerAvailableMoves(cells, player) {\r\n    return this.constructor.ROWS.map(y => this.constructor.COLUMNS.map(x => {\r\n      if (cells[y][x].player !== player) {\r\n        return false;\r\n      }\r\n\r\n      return this.hasAvailableMove(this.getMovableAvailableMoves(cells, {x, y}));\r\n    }));\r\n  }\r\n\r\n  getMovableAvailableMoves(cells, coordinates) {\r\n    const cell = cells[coordinates.y][coordinates.x];\r\n    const maximumLevel = cell.level + 1;\r\n    return this.constructor.ROWS.map(y => this.constructor.COLUMNS.map(x => (\r\n      Math.abs(x - coordinates.x) <= 1\r\n      && Math.abs(y - coordinates.y) <= 1\r\n      && !cells[y][x].player\r\n      && cells[y][x].level <= 3\r\n      && cells[y][x].level <= maximumLevel\r\n    )));\r\n  }\r\n\r\n  getBuildableAvailableMoves(cells, coordinates) {\r\n    return this.constructor.ROWS.map(y => this.constructor.COLUMNS.map(x => (\r\n      Math.abs(x - coordinates.x) <= 1\r\n      && Math.abs(y - coordinates.y) <= 1\r\n      && !cells[y][x].player\r\n      && cells[y][x].level < 4\r\n    )));\r\n  }\r\n\r\n  checkCanMakeMove(expectedMoveType, coordinates, targetCoordinates) {\r\n    if (this.finished) {\r\n      throw new Error(\"The game has already finished\");\r\n    }\r\n    if (this.moveType !== expectedMoveType) {\r\n      throw new Error(`You cannot perform move of type \"${expectedMoveType}\": you need to perform \"${this.moveType}\"`);\r\n    }\r\n    this.checkCoordinatesAreValid(coordinates);\r\n    if (targetCoordinates) {\r\n      this.checkCoordinatesAreValid(targetCoordinates);\r\n    }\r\n    if (!this.availableMoves[coordinates.y][coordinates.x]) {\r\n      throw new Error(`Move ${JSON.stringify(coordinates)} is not one of the available ones`);\r\n    }\r\n  }\r\n\r\n  makeMove(coordinates) {\r\n    const makeMoveMethods = {\r\n      [this.constructor.MOVE_TYPE_PLACE_FIRST_WORKER]: this.placeFirstWorker,\r\n      [this.constructor.MOVE_TYPE_PLACE_SECOND_WORKER]: this.placeSecondWorker,\r\n      [this.constructor.MOVE_TYPE_SELECT_WORKER_TO_MOVE]: this.selectWorkerToMove,\r\n      [this.constructor.MOVE_TYPE_MOVE_FIRST_WORKER]: this.moveFirstWorker,\r\n      [this.constructor.MOVE_TYPE_MOVE_SECOND_WORKER]: this.moveSecondWorker,\r\n      [this.constructor.MOVE_TYPE_BUILD_AROUND_WORKER]: this.buildAroundWorker,\r\n    };\r\n    const makeMoveMethod = makeMoveMethods[this.moveType];\r\n    if (!makeMoveMethod) {\r\n      throw new Error(`Don't know how to perform move of type \"${this.moveType}\"`);\r\n    }\r\n    return makeMoveMethod.bind(this)(coordinates);\r\n  }\r\n\r\n  undo() {\r\n    if (!this.canUndo) {\r\n      throw new Error(\"Cannot undo\");\r\n    }\r\n\r\n    return this.previous;\r\n  }\r\n\r\n  placeFirstWorker({x, y}) {\r\n    this.checkCanMakeMove(this.constructor.MOVE_TYPE_PLACE_FIRST_WORKER, {x, y});\r\n\r\n    const cells = {\r\n      ...this.cells,\r\n      [y]: {\r\n        ...this.cells[y],\r\n        [x]: {\r\n          ...this.cells[y][x],\r\n          player: this.nextPlayer,\r\n          worker: this.constructor.WORKER_FIRST,\r\n        },\r\n      },\r\n    };\r\n    return this.createStep(cells, {\r\n      nextPlayer: this.nextPlayer,\r\n      moveType: this.constructor.MOVE_TYPE_PLACE_SECOND_WORKER,\r\n      availableMoves: this.getEmptyCellsAvailableMoves(cells),\r\n      canUndo: true,\r\n    });\r\n  }\r\n\r\n  placeSecondWorker({x, y}) {\r\n    this.checkCanMakeMove(this.constructor.MOVE_TYPE_PLACE_SECOND_WORKER, {x, y});\r\n\r\n    const cells = {\r\n      ...this.cells,\r\n      [y]: {\r\n        ...this.cells[y],\r\n        [x]: {\r\n          ...this.cells[y][x],\r\n          player: this.nextPlayer,\r\n          worker: this.constructor.WORKER_SECOND,\r\n        },\r\n      },\r\n    };\r\n    const nextPlayer = this.constructor.OTHER_PLAYER[this.nextPlayer];\r\n    return this.createStep(cells, {\r\n      nextPlayer: nextPlayer,\r\n      moveType: nextPlayer === this.constructor.PLAYER_A\r\n        ? this.constructor.MOVE_TYPE_SELECT_WORKER_TO_MOVE\r\n        : this.constructor.MOVE_TYPE_PLACE_FIRST_WORKER,\r\n      availableMoves: nextPlayer === this.constructor.PLAYER_A\r\n        ? this.getPlayerAvailableMoves(cells, nextPlayer)\r\n        : this.getEmptyCellsAvailableMoves(cells),\r\n      canUndo: false,\r\n    });\r\n  }\r\n\r\n  selectWorkerToMove({x, y}) {\r\n    this.checkCanMakeMove(this.constructor.MOVE_TYPE_SELECT_WORKER_TO_MOVE, {x, y});\r\n\r\n    const cell = this.cells[y][x];\r\n    return this.createStep(this.cells, {\r\n      nextPlayer: this.nextPlayer,\r\n      moveType: cell.worker === this.constructor.WORKER_FIRST\r\n        ? this.constructor.MOVE_TYPE_MOVE_FIRST_WORKER\r\n        : this.constructor.MOVE_TYPE_MOVE_SECOND_WORKER,\r\n      availableMoves: this.getMovableAvailableMoves(this.cells, {x, y}),\r\n      canUndo: true,\r\n    });\r\n  }\r\n\r\n  moveWorker(to, worker) {\r\n    const fromCell = this.allCells.find(cell => cell.player === this.nextPlayer && cell.worker === worker);\r\n    const toCell = this.cells[to.y][to.x];\r\n    let cells = {\r\n      ...this.cells,\r\n      [fromCell.y]: {\r\n        ...this.cells[fromCell.y],\r\n        [fromCell.x]: {\r\n          ...fromCell,\r\n          player: null,\r\n          worker: null,\r\n        },\r\n      },\r\n    };\r\n    cells = {\r\n      ...cells,\r\n      [to.y]: {\r\n        ...cells[to.y],\r\n        [to.x]: {\r\n          ...toCell,\r\n          player: fromCell.player,\r\n          worker: fromCell.worker,\r\n        },\r\n      },\r\n    };\r\n    return this.createStep(cells, {\r\n      nextPlayer: this.nextPlayer,\r\n      moveType: this.constructor.MOVE_TYPE_BUILD_AROUND_WORKER,\r\n      availableMoves: this.getBuildableAvailableMoves(cells, to),\r\n      canUndo: true,\r\n    });\r\n  }\r\n\r\n  moveFirstWorker({x, y}) {\r\n    this.checkCanMakeMove(this.constructor.MOVE_TYPE_MOVE_FIRST_WORKER, {x, y});\r\n\r\n    return this.moveWorker({x, y}, this.constructor.WORKER_FIRST)\r\n  }\r\n\r\n  moveSecondWorker({x, y}) {\r\n    this.checkCanMakeMove(this.constructor.MOVE_TYPE_MOVE_SECOND_WORKER, {x, y});\r\n\r\n    return this.moveWorker({x, y}, this.constructor.WORKER_SECOND)\r\n  }\r\n\r\n  buildAroundWorker({x, y}) {\r\n    this.checkCanMakeMove(this.constructor.MOVE_TYPE_BUILD_AROUND_WORKER, {x, y});\r\n\r\n    const cells = {\r\n      ...this.cells,\r\n      [y]: {\r\n        ...this.cells[y],\r\n        [x]: {\r\n          ...this.cells[y][x],\r\n          level: this.cells[y][x].level + 1,\r\n        },\r\n      },\r\n    };\r\n    const nextPlayer = this.constructor.OTHER_PLAYER[this.nextPlayer];\r\n    return this.createNext(cells, {\r\n      nextPlayer: nextPlayer,\r\n      moveType: this.constructor.MOVE_TYPE_SELECT_WORKER_TO_MOVE,\r\n      availableMoves: this.getPlayerAvailableMoves(cells, nextPlayer),\r\n      canUndo: false,\r\n    });\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport Game from \"../game\";\r\n\r\nclass Board extends Component {\r\n  makeMove = (cell) => {\r\n    this.props.makeMove(this.props.game.makeMove({x: cell.x, y: cell.y}));\r\n  };\r\n\r\n  render() {\r\n    let {game} = this.props;\r\n\r\n    return (\r\n      <div className={\"background\"}>\r\n        {game.rowsAndColumns.map(row => (\r\n          <div key={`row-${row.y}`} className={\"row\"}>\r\n            {row.cells.map(cell => {\r\n              const available = game.availableMoves[cell.y][cell.x];\r\n              return (\r\n                <div\r\n                  key={`row-${cell.x}-${cell.y}`}\r\n                  className={classNames(\"cell\", `level-${cell.level}`, {available})}\r\n                  onClick={this.props.makeMove && available ? () => this.makeMove(cell) : null}\r\n                >\r\n                  <div className={classNames(\"level\", \"level-1\")}>\r\n                    <div className={classNames(\"level\", \"level-2\")}>\r\n                      <div className={classNames(\"level\", \"level-3\")}>\r\n                        {cell.player ? (\r\n                          <div className={classNames(\"worker\", `player-${cell.player}`)} />\r\n                        ) : cell.level === 4 ? (\r\n                          <div className={classNames(\"level\", \"level-4\")} />\r\n                        ) : null}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nBoard.propTypes = {\r\n  game: PropTypes.instanceOf(Game).isRequired,\r\n  makeMove: PropTypes.func,\r\n};\r\n\r\nexport default Board;\r\n","import React, {Component, Fragment} from 'react';\nimport './App.css';\nimport Game from \"./game\";\nimport Board from \"./components/board\";\n\nclass App extends Component {\n  static PLAYER_NAMES = {\n    [Game.PLAYER_A]: \"Player A\",\n    [Game.PLAYER_B]: \"Player B\",\n  };\n  static MOVE_TYPE_NAMES = {\n    [Game.MOVE_TYPE_PLACE_FIRST_WORKER]: \"Place your first worker\",\n    [Game.MOVE_TYPE_PLACE_SECOND_WORKER]: \"Place your second worker\",\n    [Game.MOVE_TYPE_SELECT_WORKER_TO_MOVE]: \"Select a worker to move\",\n    [Game.MOVE_TYPE_MOVE_FIRST_WORKER]: \"Move one of your workers\",\n    [Game.MOVE_TYPE_MOVE_SECOND_WORKER]: \"Move one of your workers\",\n    [Game.MOVE_TYPE_BUILD_AROUND_WORKER]: \"Build around the moved worker\",\n  };\n\n  state = {\n    game: Game.create(),\n  };\n\n  makeMove = newGame => {\n    this.setState({game: newGame});\n  };\n\n  undo = () => {\n    this.setState(state => ({game: state.game.undo()}));\n  };\n\n  render() {\n    const {game} = this.state;\n    return (\n      <Fragment>\n        <div>\n          Move: {game.moveCount}\n          <br />\n          {game.finished ? (\n            <Fragment>\n              {this.constructor.PLAYER_NAMES[game.winner]} won!\n            </Fragment>\n          ) : (\n            <Fragment>\n              Next player: {this.constructor.PLAYER_NAMES[game.nextPlayer]}\n              <br />\n              {this.constructor.MOVE_TYPE_NAMES[game.moveType]}\n              {game.canUndo ? (\n                <button onClick={this.undo}>Undo</button>\n              ) : null}\n            </Fragment>\n          )}\n        </div>\n        <Board game={game} makeMove={this.makeMove} />\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}